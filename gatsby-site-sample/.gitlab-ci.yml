stages:
  - build
  - test
  - deploy

build website:
  stage: build
  image: node # build with docker and use image node
  script:
    - npm install
    - npm install -g gatsby-cli
    - gatsby build
  artifacts: # export artifacts on the gitlab ci server for next step
    paths:
      - ./public # folder with the files needed to run the server

# Job status codes:
# 0 - success
# 1-255 - Error

test artifact:
  image: alpine
  stage: test
  script:
    - cd ./public
    - grep -q "Gatsby" index.html
    - echo $? #check the last return code for the command

test server:
  image: node
  stage: test # since both this and the above job are a part of the same stage , they will run in parallel
  script:
    - npm install
    - npm install -g gatsby-cli
    - gatsby serve & # start server using prod build in the backround
    - sleep 3
    - curl "http://localhost:9000" | tac | tac | grep -q "Gatsby" #check if server is running
    - echo $?

deploy to EC2:
  stage: deploy
  before_script:
    - mkdir -p ~/.ssh
    - echo -e "$SSH_KEY" > ~/.ssh/id_rsa # create SSH_KEY var in gitlab and paste private key used for EC2
    - cat ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStringHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - bash .gitlab-deploy.sh
